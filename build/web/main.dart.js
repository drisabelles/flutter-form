// Generated by DDC, the Dart Development Compiler (to JavaScript).
// Version: 2.19.2 (stable) (Tue Feb 7 18:37:17 2023 +0000) on "linux_x64"
// Module: zapp_user_main
// Flags: soundNullSafety(true), enableAsserts(true)
define('zapp_user_main', ['dart_sdk', 'flutter_sdk'], (function load__zapp_user_main(dart_sdk, flutter_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const async = dart_sdk.async;
  const _interceptors = dart_sdk._interceptors;
  const js = dart_sdk.js;
  const ui = dart_sdk.ui;
  const _js_helper = dart_sdk._js_helper;
  const convert = dart_sdk.convert;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const app = flutter_sdk.src__material__app;
  const theme_data = flutter_sdk.src__material__theme_data;
  const colors = flutter_sdk.src__material__colors;
  const framework = flutter_sdk.src__widgets__framework;
  const binding = flutter_sdk.src__widgets__binding;
  const form = flutter_sdk.src__widgets__form;
  const scaffold = flutter_sdk.src__material__scaffold;
  const app_bar = flutter_sdk.src__material__app_bar;
  const text = flutter_sdk.src__widgets__text;
  const single_child_scroll_view = flutter_sdk.src__widgets__single_child_scroll_view;
  const basic = flutter_sdk.src__widgets__basic;
  const edge_insets = flutter_sdk.src__painting__edge_insets;
  const icons = flutter_sdk.src__material__icons;
  const elevated_button = flutter_sdk.src__material__elevated_button;
  const navigator = flutter_sdk.src__widgets__navigator;
  const page = flutter_sdk.src__material__page;
  const text_form_field = flutter_sdk.src__material__text_form_field;
  const input_decorator = flutter_sdk.src__material__input_decorator;
  const input_border = flutter_sdk.src__material__input_border;
  const border_radius = flutter_sdk.src__painting__border_radius;
  const icon = flutter_sdk.src__widgets__icon;
  const icon_data = flutter_sdk.src__widgets__icon_data;
  const flex = flutter_sdk.src__rendering__flex;
  const text_style = flutter_sdk.src__painting__text_style;
  var $46zapp_entry = Object.create(dart.library);
  var main = Object.create(dart.library);
  var web_plugin_registrant = Object.create(dart.library);
  var register = Object.create(dart.library);
  var customTextField = Object.create(dart.library);
  var profile = Object.create(dart.library);
  var string_validator = Object.create(dart.library);
  var validator = Object.create(dart.library);
  var sanitizer = Object.create(dart.library);
  var helpers = Object.create(dart.library);
  var $toString = dartx.toString;
  var $isEmpty = dartx.isEmpty;
  var $contains = dartx.contains;
  var $toLowerCase = dartx.toLowerCase;
  var $indexOf = dartx.indexOf;
  var $split = dartx.split;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $join = dartx.join;
  var $isNotEmpty = dartx.isNotEmpty;
  var $sort = dartx.sort;
  var $removeLast = dartx.removeLast;
  var $toUpperCase = dartx.toUpperCase;
  var $modulo = dartx['%'];
  var $toList = dartx.toList;
  var $replaceAll = dartx.replaceAll;
  var $substring = dartx.substring;
  var $toInt = dartx.toInt;
  var $_set = dartx._set;
  var $removeAt = dartx.removeAt;
  var $putIfAbsent = dartx.putIfAbsent;
  var $forEach = dartx.forEach;
  dart._checkModuleNullSafetyMode(true);
  dart._checkModuleRuntimeTypes(false);
  var T = {
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    ListOfString: () => (T.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListOfStringTodynamic: () => (T.ListOfStringTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T.ListOfString()])))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToNull: () => (T.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    VoidToNull: () => (T.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    ObjectAndStackTraceTovoid: () => (T.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    GlobalKeyOfFormState: () => (T.GlobalKeyOfFormState = dart.constFn(framework.GlobalKey$(form.FormState)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    StringNToStringN: () => (T.StringNToStringN = dart.constFn(dart.fnType(T.StringN(), [T.StringN()])))(),
    StringNTovoid: () => (T.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T.StringN()])))(),
    BuildContextToProfile: () => (T.BuildContextToProfile = dart.constFn(dart.fnType(profile.Profile, [framework.BuildContext])))(),
    JSArrayOfWidget: () => (T.JSArrayOfWidget = dart.constFn(_interceptors.JSArray$(framework.Widget)))(),
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringAndStringToint: () => (T.StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))(),
    IdentityMapOfString$bool: () => (T.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    IdentityMapOfString$RegExp: () => (T.IdentityMapOfString$RegExp = dart.constFn(_js_helper.IdentityMap$(core.String, core.RegExp)))(),
    VoidToObject: () => (T.VoidToObject = dart.constFn(dart.fnType(core.Object, [])))(),
    StringAndObjectTovoid: () => (T.StringAndObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.Object])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.fn(main.main, T.VoidTovoid());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Cadastro"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 20,
        [EdgeInsets_right]: 20,
        [EdgeInsets_top]: 20,
        [EdgeInsets_left]: 20
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 15,
        [SizedBox_width]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: basic.SizedBox.prototype,
        [Widget_key]: null,
        [SingleChildRenderObjectWidget_child]: null,
        [SizedBox_height]: 30,
        [SizedBox_width]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Cadastrar"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: text.Text.prototype,
        [Widget_key]: null,
        [Text_selectionColor]: null,
        [Text_textHeightBehavior]: null,
        [Text_textWidthBasis]: null,
        [Text_semanticsLabel]: null,
        [Text_maxLines]: null,
        [Text_textScaleFactor]: null,
        [Text_overflow]: null,
        [Text_softWrap]: null,
        [Text_locale]: null,
        [Text_textDirection]: null,
        [Text_textAlign]: null,
        [Text_strutStyle]: null,
        [Text_style]: null,
        [Text_textSpan]: null,
        [Text_data]: "Cancelar"
      });
    }
  }, false);
  var C = Array(7).fill(void 0);
  var I = [
    "file:///zapp/project/lib/main.dart",
    "package:flutter_app/screens/register.dart",
    "package:flutter_app/components/customTextField.dart",
    "package:flutter_app/screens/profile.dart",
    "file:///zapp/pub/.pub_cache/hosted/pub.dev/string_validator-1.0.0/lib/src/validator.dart"
  ];
  $46zapp_entry.runAppGuarded = function runAppGuarded() {
    async.runZonedGuarded(core.Null, dart.fn(() => {
      if (T.ListOfStringTodynamic().is(C[0] || CT.C0)) {
        T.ListOfStringTodynamic().as(C[0] || CT.C0)(T.JSArrayOfString().of([]));
      } else {
        (C[0] || CT.C0)();
      }
      if (js.context.hasProperty("__notifyFlutterRendered")) {
        async.Future.delayed(new core.Duration.new({milliseconds: 250})).then(core.Null, dart.fn(_ => {
          js.context.callMethod("__notifyFlutterRendered", [false]);
        }, T.dynamicToNull()));
      }
    }, T.VoidToNull()), dart.fn((e, stackTrace) => {
      if (js.context.hasProperty("zappHandlerUserError")) {
        js.context.callMethod("zappHandlerUserError", [e[$toString](), stackTrace.toString()]);
      }
    }, T.ObjectAndStackTraceTovoid()), {zoneSpecification: new async._ZoneSpecification.new({print: dart.fn((self, parent, zone, line) => {
          if (js.context.hasProperty("zappHandlerUserPrint")) {
            js.context.callMethod("zappHandlerUserPrint", [line]);
          }
        }, T.ZoneAndZoneDelegateAndZone__Tovoid())})});
  };
  $46zapp_entry.main = function main$() {
    return async.async(dart.void, function* main() {
      yield ui.webOnlyWarmupEngine({runApp: dart.fn(() => {
          $46zapp_entry.runAppGuarded();
        }, T.VoidToNull()), registerPlugins: dart.fn(() => {
          web_plugin_registrant.registerPlugins();
        }, T.VoidToNull())});
    });
  };
  main.MyApp = class MyApp extends framework.StatelessWidget {
    build(context) {
      return new app.MaterialApp.new({title: "Aplicativo da Isabelle", theme: theme_data.ThemeData.new({primarySwatch: colors.Colors.purple}), home: new register.Register.new()});
    }
    static ['_#new#tearOff']() {
      return new main.MyApp.new();
    }
  };
  (main.MyApp.new = function() {
    main.MyApp.__proto__.new.call(this);
    ;
  }).prototype = main.MyApp.prototype;
  dart.addTypeTests(main.MyApp);
  dart.addTypeCaches(main.MyApp);
  dart.setMethodSignature(main.MyApp, () => ({
    __proto__: dart.getMethods(main.MyApp.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(main.MyApp, I[0]);
  main.main = function main$0() {
    return binding.runApp(new main.MyApp.new());
  };
  web_plugin_registrant.registerPlugins = function registerPlugins() {
  };
  register.Register = class Register extends framework.StatefulWidget {
    createState() {
      return new register._RegisterState.new();
    }
    static ['_#new#tearOff']() {
      return new register.Register.new();
    }
  };
  (register.Register.new = function() {
    register.Register.__proto__.new.call(this);
    ;
  }).prototype = register.Register.prototype;
  dart.addTypeTests(register.Register);
  dart.addTypeCaches(register.Register);
  dart.setMethodSignature(register.Register, () => ({
    __proto__: dart.getMethods(register.Register.__proto__),
    createState: dart.fnType(framework.State$(framework.StatefulWidget), [])
  }));
  dart.setLibraryUri(register.Register, I[1]);
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Text_selectionColor = dart.privateName(text, "Text.selectionColor");
  var Text_textHeightBehavior = dart.privateName(text, "Text.textHeightBehavior");
  var Text_textWidthBasis = dart.privateName(text, "Text.textWidthBasis");
  var Text_semanticsLabel = dart.privateName(text, "Text.semanticsLabel");
  var Text_maxLines = dart.privateName(text, "Text.maxLines");
  var Text_textScaleFactor = dart.privateName(text, "Text.textScaleFactor");
  var Text_overflow = dart.privateName(text, "Text.overflow");
  var Text_softWrap = dart.privateName(text, "Text.softWrap");
  var Text_locale = dart.privateName(text, "Text.locale");
  var Text_textDirection = dart.privateName(text, "Text.textDirection");
  var Text_textAlign = dart.privateName(text, "Text.textAlign");
  var Text_strutStyle = dart.privateName(text, "Text.strutStyle");
  var Text_style = dart.privateName(text, "Text.style");
  var Text_textSpan = dart.privateName(text, "Text.textSpan");
  var Text_data = dart.privateName(text, "Text.data");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var SingleChildRenderObjectWidget_child = dart.privateName(framework, "SingleChildRenderObjectWidget.child");
  var SizedBox_height = dart.privateName(basic, "SizedBox.height");
  var SizedBox_width = dart.privateName(basic, "SizedBox.width");
  register._RegisterState = class _RegisterState extends framework.State$(register.Register) {
    build(context) {
      return new scaffold.Scaffold.new({appBar: new app_bar.AppBar.new({title: C[1] || CT.C1}), body: new single_child_scroll_view.SingleChildScrollView.new({child: new form.Form.new({key: this.formKey, child: new basic.Padding.new({padding: C[2] || CT.C2, child: new basic.Column.new({children: T.JSArrayOfWidget().of([new customTextField.CustomTextField.new({label: "Nome", icon: icons.Icons.person, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({nome: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "E-mail", icon: icons.Icons.mail, validator: dart.fn(text => {
                      if (text == null || text[$isEmpty]) {
                        return "Esse campo deve ser preenchido";
                      }
                      if (!validator.isEmail(text)) {
                        return "Formato inválido para e-mail";
                      }
                    }, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({email: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "Endereço", icon: icons.Icons.place, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({endereco: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "Número", icon: icons.Icons.numbers, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({numero: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "Complemento", icon: icons.Icons.location_city, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({complemento: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "UF", icon: icons.Icons.map, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({uf: text}), T.StringNTovoid())}), C[3] || CT.C3, new customTextField.CustomTextField.new({label: "CEP", icon: icons.Icons.numbers, validator: dart.fn(text => text == null || text[$isEmpty] ? "Esse campo deve ser preenchido" : null, T.StringNToStringN()), onSaved: dart.fn(text => this.user = this.user.copyWith({cep: text}), T.StringNTovoid())}), C[4] || CT.C4, new basic.SizedBox.new({width: 1 / 0, height: 50, child: new elevated_button.ElevatedButton.new({onPressed: dart.fn(() => {
                        if (dart.nullCheck(this.formKey.currentState).validate()) {
                          dart.nullCheck(this.formKey.currentState).save();
                          navigator.Navigator.of(context).push(dart.dynamic, new page.MaterialPageRoute.new({builder: dart.fn(context => new profile.Profile.new({nome: this.user.nome, email: this.user.email, endereco: this.user.endereco, numero: this.user.numero, complemento: this.user.complemento, uf: this.user.uf, cep: this.user.cep}), T.BuildContextToProfile())}));
                        }
                      }, T.VoidTovoid()), child: C[5] || CT.C5})}), C[3] || CT.C3, new basic.SizedBox.new({width: 1 / 0, height: 50, child: new elevated_button.ElevatedButton.new({style: elevated_button.ElevatedButton.styleFrom({primary: colors.Colors.red}), onPressed: dart.fn(() => {
                        dart.nullCheck(this.formKey.currentState).reset();
                      }, T.VoidTovoid()), child: C[6] || CT.C6})})])})})})})});
    }
    static ['_#new#tearOff']() {
      return new register._RegisterState.new();
    }
  };
  (register._RegisterState.new = function() {
    this.user = new register.UserModel.new();
    this.formKey = T.GlobalKeyOfFormState().new();
    register._RegisterState.__proto__.new.call(this);
    ;
  }).prototype = register._RegisterState.prototype;
  dart.addTypeTests(register._RegisterState);
  dart.addTypeCaches(register._RegisterState);
  dart.setMethodSignature(register._RegisterState, () => ({
    __proto__: dart.getMethods(register._RegisterState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(register._RegisterState, I[1]);
  dart.setFieldSignature(register._RegisterState, () => ({
    __proto__: dart.getFields(register._RegisterState.__proto__),
    user: dart.fieldType(register.UserModel),
    formKey: dart.finalFieldType(framework.GlobalKey$(form.FormState))
  }));
  var nome$ = dart.privateName(register, "UserModel.nome");
  var email$ = dart.privateName(register, "UserModel.email");
  var endereco$ = dart.privateName(register, "UserModel.endereco");
  var numero$ = dart.privateName(register, "UserModel.numero");
  var complemento$ = dart.privateName(register, "UserModel.complemento");
  var uf$ = dart.privateName(register, "UserModel.uf");
  var cep$ = dart.privateName(register, "UserModel.cep");
  register.UserModel = class UserModel extends core.Object {
    get nome() {
      return this[nome$];
    }
    set nome(value) {
      super.nome = value;
    }
    get email() {
      return this[email$];
    }
    set email(value) {
      super.email = value;
    }
    get endereco() {
      return this[endereco$];
    }
    set endereco(value) {
      super.endereco = value;
    }
    get numero() {
      return this[numero$];
    }
    set numero(value) {
      super.numero = value;
    }
    get complemento() {
      return this[complemento$];
    }
    set complemento(value) {
      super.complemento = value;
    }
    get uf() {
      return this[uf$];
    }
    set uf(value) {
      super.uf = value;
    }
    get cep() {
      return this[cep$];
    }
    set cep(value) {
      super.cep = value;
    }
    static ['_#new#tearOff'](opts) {
      let nome = opts && 'nome' in opts ? opts.nome : "";
      let email = opts && 'email' in opts ? opts.email : "";
      let endereco = opts && 'endereco' in opts ? opts.endereco : "";
      let numero = opts && 'numero' in opts ? opts.numero : "";
      let complemento = opts && 'complemento' in opts ? opts.complemento : "";
      let uf = opts && 'uf' in opts ? opts.uf : "";
      let cep = opts && 'cep' in opts ? opts.cep : "";
      return new register.UserModel.new({nome: nome, email: email, endereco: endereco, numero: numero, complemento: complemento, uf: uf, cep: cep});
    }
    copyWith(opts) {
      let t0, t0$, t0$0, t0$1, t0$2, t0$3, t0$4;
      let nome = opts && 'nome' in opts ? opts.nome : null;
      let email = opts && 'email' in opts ? opts.email : null;
      let endereco = opts && 'endereco' in opts ? opts.endereco : null;
      let numero = opts && 'numero' in opts ? opts.numero : null;
      let complemento = opts && 'complemento' in opts ? opts.complemento : null;
      let uf = opts && 'uf' in opts ? opts.uf : null;
      let cep = opts && 'cep' in opts ? opts.cep : null;
      return new register.UserModel.new({nome: (t0 = nome, t0 == null ? this.nome : t0), email: (t0$ = email, t0$ == null ? this.email : t0$), endereco: (t0$0 = endereco, t0$0 == null ? this.endereco : t0$0), numero: (t0$1 = numero, t0$1 == null ? this.numero : t0$1), complemento: (t0$2 = complemento, t0$2 == null ? this.complemento : t0$2), uf: (t0$3 = uf, t0$3 == null ? this.uf : t0$3), cep: (t0$4 = cep, t0$4 == null ? this.cep : t0$4)});
    }
  };
  (register.UserModel.new = function(opts) {
    let nome = opts && 'nome' in opts ? opts.nome : "";
    let email = opts && 'email' in opts ? opts.email : "";
    let endereco = opts && 'endereco' in opts ? opts.endereco : "";
    let numero = opts && 'numero' in opts ? opts.numero : "";
    let complemento = opts && 'complemento' in opts ? opts.complemento : "";
    let uf = opts && 'uf' in opts ? opts.uf : "";
    let cep = opts && 'cep' in opts ? opts.cep : "";
    this[nome$] = nome;
    this[email$] = email;
    this[endereco$] = endereco;
    this[numero$] = numero;
    this[complemento$] = complemento;
    this[uf$] = uf;
    this[cep$] = cep;
    ;
  }).prototype = register.UserModel.prototype;
  dart.addTypeTests(register.UserModel);
  dart.addTypeCaches(register.UserModel);
  dart.setMethodSignature(register.UserModel, () => ({
    __proto__: dart.getMethods(register.UserModel.__proto__),
    copyWith: dart.fnType(register.UserModel, [], {cep: dart.nullable(core.String), complemento: dart.nullable(core.String), email: dart.nullable(core.String), endereco: dart.nullable(core.String), nome: dart.nullable(core.String), numero: dart.nullable(core.String), uf: dart.nullable(core.String)}, {})
  }));
  dart.setLibraryUri(register.UserModel, I[1]);
  dart.setFieldSignature(register.UserModel, () => ({
    __proto__: dart.getFields(register.UserModel.__proto__),
    nome: dart.finalFieldType(core.String),
    email: dart.finalFieldType(core.String),
    endereco: dart.finalFieldType(core.String),
    numero: dart.finalFieldType(core.String),
    complemento: dart.finalFieldType(core.String),
    uf: dart.finalFieldType(core.String),
    cep: dart.finalFieldType(core.String)
  }));
  var label$ = dart.privateName(customTextField, "CustomTextField.label");
  var icon$ = dart.privateName(customTextField, "CustomTextField.icon");
  var validator$ = dart.privateName(customTextField, "CustomTextField.validator");
  var onSaved$ = dart.privateName(customTextField, "CustomTextField.onSaved");
  customTextField.CustomTextField = class CustomTextField extends framework.StatelessWidget {
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get icon() {
      return this[icon$];
    }
    set icon(value) {
      super.icon = value;
    }
    get validator() {
      return this[validator$];
    }
    set validator(value) {
      super.validator = value;
    }
    get onSaved() {
      return this[onSaved$];
    }
    set onSaved(value) {
      super.onSaved = value;
    }
    static ['_#new#tearOff'](opts) {
      let key = opts && 'key' in opts ? opts.key : null;
      let label = opts && 'label' in opts ? opts.label : null;
      let icon = opts && 'icon' in opts ? opts.icon : null;
      let validator = opts && 'validator' in opts ? opts.validator : null;
      let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
      return new customTextField.CustomTextField.new({key: key, label: label, icon: icon, validator: validator, onSaved: onSaved});
    }
    build(context) {
      return new text_form_field.TextFormField.new({validator: this.validator, onSaved: this.onSaved, decoration: new input_decorator.InputDecoration.new({labelText: this.label, hintText: "Digite o " + this.label, border: new input_border.OutlineInputBorder.new({borderRadius: new border_radius.BorderRadius.circular(5)}), prefixIcon: this.icon == null ? null : new icon.Icon.new(this.icon)})});
    }
  };
  (customTextField.CustomTextField.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let icon = opts && 'icon' in opts ? opts.icon : null;
    let validator = opts && 'validator' in opts ? opts.validator : null;
    let onSaved = opts && 'onSaved' in opts ? opts.onSaved : null;
    this[label$] = label;
    this[icon$] = icon;
    this[validator$] = validator;
    this[onSaved$] = onSaved;
    customTextField.CustomTextField.__proto__.new.call(this, {key: key});
    ;
  }).prototype = customTextField.CustomTextField.prototype;
  dart.addTypeTests(customTextField.CustomTextField);
  dart.addTypeCaches(customTextField.CustomTextField);
  dart.setMethodSignature(customTextField.CustomTextField, () => ({
    __proto__: dart.getMethods(customTextField.CustomTextField.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(customTextField.CustomTextField, I[2]);
  dart.setFieldSignature(customTextField.CustomTextField, () => ({
    __proto__: dart.getFields(customTextField.CustomTextField.__proto__),
    label: dart.finalFieldType(core.String),
    icon: dart.finalFieldType(dart.nullable(icon_data.IconData)),
    validator: dart.finalFieldType(dart.nullable(dart.fnType(dart.nullable(core.String), [dart.nullable(core.String)]))),
    onSaved: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [dart.nullable(core.String)])))
  }));
  var nome$0 = dart.privateName(profile, "Profile.nome");
  var email$0 = dart.privateName(profile, "Profile.email");
  var endereco$0 = dart.privateName(profile, "Profile.endereco");
  var numero$0 = dart.privateName(profile, "Profile.numero");
  var complemento$0 = dart.privateName(profile, "Profile.complemento");
  var uf$0 = dart.privateName(profile, "Profile.uf");
  var cep$0 = dart.privateName(profile, "Profile.cep");
  profile.Profile = class Profile extends framework.StatelessWidget {
    get nome() {
      return this[nome$0];
    }
    set nome(value) {
      this[nome$0] = value;
    }
    get email() {
      return this[email$0];
    }
    set email(value) {
      this[email$0] = value;
    }
    get endereco() {
      return this[endereco$0];
    }
    set endereco(value) {
      this[endereco$0] = value;
    }
    get numero() {
      return this[numero$0];
    }
    set numero(value) {
      this[numero$0] = value;
    }
    get complemento() {
      return this[complemento$0];
    }
    set complemento(value) {
      this[complemento$0] = value;
    }
    get uf() {
      return this[uf$0];
    }
    set uf(value) {
      this[uf$0] = value;
    }
    get cep() {
      return this[cep$0];
    }
    set cep(value) {
      this[cep$0] = value;
    }
    static ['_#new#tearOff'](opts) {
      let nome = opts && 'nome' in opts ? opts.nome : null;
      let email = opts && 'email' in opts ? opts.email : null;
      let endereco = opts && 'endereco' in opts ? opts.endereco : null;
      let numero = opts && 'numero' in opts ? opts.numero : null;
      let complemento = opts && 'complemento' in opts ? opts.complemento : null;
      let uf = opts && 'uf' in opts ? opts.uf : null;
      let cep = opts && 'cep' in opts ? opts.cep : null;
      return new profile.Profile.new({nome: nome, email: email, endereco: endereco, numero: numero, complemento: complemento, uf: uf, cep: cep});
    }
    build(context) {
      return new scaffold.Scaffold.new({body: new basic.Center.new({child: new basic.Column.new({mainAxisAlignment: flex.MainAxisAlignment.center, crossAxisAlignment: flex.CrossAxisAlignment.start, children: T.JSArrayOfWidget().of([new text.Text.new("Olá " + this.nome + "!", {style: new text_style.TextStyle.new({fontSize: 20, fontWeight: ui.FontWeight.bold, color: colors.Colors.pink})}), C[4] || CT.C4, new text.Text.new("E-mail: " + this.email), C[3] || CT.C3, new text.Text.new("Endereço: " + this.endereco), C[3] || CT.C3, new text.Text.new("Número: " + this.numero), C[3] || CT.C3, new text.Text.new("Complemento: " + this.complemento), C[3] || CT.C3, new text.Text.new("UF: " + this.uf), C[3] || CT.C3, new text.Text.new("CEP: " + this.cep), C[3] || CT.C3])})})});
    }
  };
  (profile.Profile.new = function(opts) {
    let nome = opts && 'nome' in opts ? opts.nome : null;
    let email = opts && 'email' in opts ? opts.email : null;
    let endereco = opts && 'endereco' in opts ? opts.endereco : null;
    let numero = opts && 'numero' in opts ? opts.numero : null;
    let complemento = opts && 'complemento' in opts ? opts.complemento : null;
    let uf = opts && 'uf' in opts ? opts.uf : null;
    let cep = opts && 'cep' in opts ? opts.cep : null;
    this[nome$0] = nome;
    this[email$0] = email;
    this[endereco$0] = endereco;
    this[numero$0] = numero;
    this[complemento$0] = complemento;
    this[uf$0] = uf;
    this[cep$0] = cep;
    profile.Profile.__proto__.new.call(this);
    ;
  }).prototype = profile.Profile.prototype;
  dart.addTypeTests(profile.Profile);
  dart.addTypeCaches(profile.Profile);
  dart.setMethodSignature(profile.Profile, () => ({
    __proto__: dart.getMethods(profile.Profile.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(profile.Profile, I[3]);
  dart.setFieldSignature(profile.Profile, () => ({
    __proto__: dart.getFields(profile.Profile.__proto__),
    nome: dart.fieldType(core.String),
    email: dart.fieldType(core.String),
    endereco: dart.fieldType(core.String),
    numero: dart.fieldType(core.String),
    complemento: dart.fieldType(core.String),
    uf: dart.fieldType(core.String),
    cep: dart.fieldType(core.String)
  }));
  validator.equals = function equals(str, comparison) {
    return str === dart.toString(comparison);
  };
  validator.contains = function contains(str, substring) {
    return str[$contains](substring);
  };
  validator.matches = function matches(str, pattern) {
    let re = core.RegExp.new(pattern);
    return re.hasMatch(str);
  };
  validator.isEmail = function isEmail(str) {
    return validator._email.hasMatch(str[$toLowerCase]());
  };
  validator.isURL = function isURL(input, options = null) {
    let t0, t0$, t0$0, t0$1, t0$2, t0$3;
    let str = input;
    if (str == null || str[$isEmpty] || str.length > 2083 || str[$indexOf]("mailto:") === 0) {
      return false;
    }
    let defaultUrlOptions = new (T.IdentityMapOfString$Object()).from(["protocols", T.JSArrayOfString().of(["http", "https", "ftp"]), "require_tld", true, "require_protocol", false, "allow_underscores", false]);
    options = helpers.merge(options, defaultUrlOptions);
    let split = str[$split]("://");
    if (split[$length] > 1) {
      let protocol = helpers.shift(split);
      let protocols = T.ListOfString().as(options[$_get]("protocols"));
      if (!protocols[$contains](protocol)) {
        return false;
      }
    } else if (dart.equals(options[$_get]("require_protocol"), true)) {
      return false;
    }
    str = split[$join]("://");
    split = str[$split]("#");
    str = helpers.shift(split);
    let hash = split[$join]("#");
    if (hash[$isNotEmpty] && core.RegExp.new("\\s").hasMatch(hash)) {
      return false;
    }
    split = (t0$ = (t0 = str, t0 == null ? null : t0[$split]("?")), t0$ == null ? T.JSArrayOfString().of([]) : t0$);
    str = helpers.shift(split);
    let query = split[$join]("?");
    if (query !== "" && core.RegExp.new("\\s").hasMatch(query)) {
      return false;
    }
    split = (t0$1 = (t0$0 = str, t0$0 == null ? null : t0$0[$split]("/")), t0$1 == null ? T.JSArrayOfString().of([]) : t0$1);
    str = helpers.shift(split);
    let path = split[$join]("/");
    if (path !== "" && core.RegExp.new("\\s").hasMatch(path)) {
      return false;
    }
    split = (t0$3 = (t0$2 = str, t0$2 == null ? null : t0$2[$split]("@")), t0$3 == null ? T.JSArrayOfString().of([]) : t0$3);
    if (split[$length] > 1) {
      let auth = helpers.shift(split);
      if (auth != null && auth[$contains](":")) {
        let parts = auth[$split](":");
        let user = helpers.shift(parts);
        if (user == null || !core.RegExp.new("^\\S+$").hasMatch(user)) {
          return false;
        }
        let pass = parts[$join](":");
        if (!core.RegExp.new("^\\S*$").hasMatch(pass)) {
          return false;
        }
      }
    }
    let hostname = split[$join]("@");
    split = hostname[$split](":");
    let host = helpers.shift(split);
    if (split[$isNotEmpty]) {
      let portStr = split[$join](":");
      let port = core.int.tryParse(portStr, {radix: 10});
      if (!core.RegExp.new("^[0-9]+$").hasMatch(portStr) || port == null || dart.notNull(port) <= 0 || dart.notNull(port) > 65535) {
        return false;
      }
    }
    if (host == null || !validator.isIP(host) && !validator.isFQDN(host, options) && host !== "localhost") {
      return false;
    }
    return true;
  };
  validator.isIP = function isIP(str, version = null) {
    if (!(version == null || typeof version == 'string' || core.int.is(version))) dart.assertFailed(null, I[4], 189, 10, "version == null || version is String || version is int");
    version = dart.toString(version);
    if (version === "null") {
      return validator.isIP(str, 4) || validator.isIP(str, 6);
    } else if (version === "4") {
      if (!validator._ipv4Maybe.hasMatch(str)) {
        return false;
      }
      let parts = str[$split](".");
      parts[$sort](dart.fn((a, b) => core.int.parse(a) - core.int.parse(b), T.StringAndStringToint()));
      return core.int.parse(parts[$_get](3)) <= 255;
    }
    return version === "6" && validator._ipv6.hasMatch(str);
  };
  validator.isFQDN = function isFQDN(str, options = null) {
    let defaultFqdnOptions = new (T.IdentityMapOfString$bool()).from(["require_tld", true, "allow_underscores", false]);
    options = helpers.merge(options, defaultFqdnOptions);
    let parts = str[$split](".");
    if (core.bool.as(options[$_get]("require_tld"))) {
      let tld = parts[$removeLast]();
      if (parts[$isEmpty] || !core.RegExp.new("^[a-z]{2,}$").hasMatch(tld)) {
        return false;
      }
    }
    for (let part of parts) {
      if (core.bool.as(options[$_get]("allow_underscores"))) {
        if (part[$contains]("__")) {
          return false;
        }
      }
      if (!core.RegExp.new("^[a-z\\\\u00a1-\\\\uffff0-9-]+$").hasMatch(part)) {
        return false;
      }
      if (part[$_get](0) === "-" || part[$_get](part.length - 1) === "-" || part[$contains]("---")) {
        return false;
      }
    }
    return true;
  };
  validator.isAlpha = function isAlpha(str) {
    return validator._alpha.hasMatch(str);
  };
  validator.isNumeric = function isNumeric(str) {
    return validator._numeric.hasMatch(str);
  };
  validator.isAlphanumeric = function isAlphanumeric(str) {
    return validator._alphanumeric.hasMatch(str);
  };
  validator.isBase64 = function isBase64(str) {
    return validator._base64.hasMatch(str);
  };
  validator.isInt = function isInt(str) {
    return validator._int.hasMatch(str);
  };
  validator.isFloat = function isFloat(str) {
    return validator._float.hasMatch(str);
  };
  validator.isHexadecimal = function isHexadecimal(str) {
    return validator._hexadecimal.hasMatch(str);
  };
  validator.isHexColor = function isHexColor(str) {
    return validator._hexColor.hasMatch(str);
  };
  validator.isLowercase = function isLowercase(str) {
    return str === str[$toLowerCase]();
  };
  validator.isUppercase = function isUppercase(str) {
    return str === str[$toUpperCase]();
  };
  validator.isDivisibleBy = function isDivisibleBy(str, n) {
    if (!(typeof n == 'string' || core.int.is(n))) dart.assertFailed(null, I[4], 291, 10, "n is String || n is int");
    let number = null;
    if (core.int.is(n)) {
      number = n;
    } else if (typeof n == 'string') {
      number = core.int.tryParse(n);
    } else {
      return false;
    }
    if (number == null) return false;
    try {
      return core.double.parse(str)[$modulo](number) === 0;
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return false;
      } else
        throw e$;
    }
  };
  validator.isLength = function isLength(str, min, max = null) {
    let surrogatePairs = validator._surrogatePairsRegExp.allMatches(str)[$toList]();
    let len = str.length - surrogatePairs[$length];
    return len >= min && (max == null || len <= dart.notNull(max));
  };
  validator.isByteLength = function isByteLength(str, min, max = null) {
    return str.length >= min && (max == null || str.length <= dart.notNull(max));
  };
  validator.isUUID = function isUUID(str, version = null) {
    if (version == null) {
      version = "all";
    } else {
      version = dart.toString(version);
    }
    let pat = validator._uuid[$_get](version);
    return pat != null && pat.hasMatch(str[$toUpperCase]());
  };
  validator.isDate = function isDate(str) {
    return core.DateTime.tryParse(str) != null;
  };
  validator.isAfter = function isAfter(str, date = null) {
    let referenceDate = null;
    if (date == null) {
      referenceDate = new core.DateTime.now();
    } else if (validator.isDate(date)) {
      referenceDate = core.DateTime.parse(date);
    } else {
      return false;
    }
    let strDate = core.DateTime.tryParse(str);
    if (strDate == null) return false;
    return strDate.isAfter(referenceDate);
  };
  validator.isBefore = function isBefore(str, date = null) {
    let referenceDate = null;
    if (date == null) {
      referenceDate = new core.DateTime.now();
    } else if (validator.isDate(date)) {
      referenceDate = core.DateTime.parse(date);
    } else {
      return false;
    }
    let strDate = core.DateTime.tryParse(str);
    if (strDate == null) return false;
    return strDate.isBefore(referenceDate);
  };
  validator.isIn = function isIn(str, values) {
    if (values == null) return false;
    if (typeof values == 'string') {
      return values[$contains](str);
    }
    if (!core.Iterable.is(values)) return false;
    for (let value of values) {
      if (dart.toString(value) === str) return true;
    }
    return false;
  };
  validator.isCreditCard = function isCreditCard(str) {
    let sanitized = str[$replaceAll](core.RegExp.new("[^0-9]+"), "");
    if (!validator._creditCard.hasMatch(sanitized)) {
      return false;
    }
    let sum = 0;
    let digit = null;
    let shouldDouble = false;
    for (let i = sanitized.length - 1; i >= 0; i = i - 1) {
      digit = sanitized[$substring](i, i + 1);
      let tmpNum = core.int.parse(digit);
      if (shouldDouble === true) {
        tmpNum = tmpNum * 2;
        if (tmpNum >= 10) {
          sum = sum + (tmpNum[$modulo](10) + 1);
        } else {
          sum = sum + tmpNum;
        }
      } else {
        sum = sum + tmpNum;
      }
      shouldDouble = !shouldDouble;
    }
    return sum[$modulo](10) === 0;
  };
  validator.isISBN = function isISBN(str, version = null) {
    if (version == null) {
      return validator.isISBN(str, "10") || validator.isISBN(str, "13");
    }
    version = dart.toString(version);
    let sanitized = str[$replaceAll](core.RegExp.new("[\\s-]+"), "");
    let checksum = 0;
    if (dart.equals(version, "10")) {
      if (!validator._isbn10Maybe.hasMatch(sanitized)) {
        return false;
      }
      for (let i = 0; i < 9; i = i + 1) {
        checksum = checksum + (i + 1) * core.int.parse(sanitized[$_get](i));
      }
      if (sanitized[$_get](9) === "X") {
        checksum = checksum + 10 * 10;
      } else {
        checksum = checksum + 10 * core.int.parse(sanitized[$_get](9));
      }
      return checksum[$modulo](11) === 0;
    } else if (dart.equals(version, "13")) {
      if (!validator._isbn13Maybe.hasMatch(sanitized)) {
        return false;
      }
      let factor = T.JSArrayOfint().of([1, 3]);
      for (let i = 0; i < 12; i = i + 1) {
        checksum = checksum + factor[$_get](i[$modulo](2)) * core.int.parse(sanitized[$_get](i));
      }
      return core.int.parse(sanitized[$_get](12)) - (10 - checksum[$modulo](10))[$modulo](10) === 0;
    }
    return false;
  };
  validator.isJson = function isJson(str) {
    try {
      convert.json.decode(str);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return false;
      } else
        throw e$;
    }
    return true;
  };
  validator.isMultibyte = function isMultibyte(str) {
    return validator._multibyte.hasMatch(str);
  };
  validator.isAscii = function isAscii(str) {
    return validator._ascii.hasMatch(str);
  };
  validator.isFullWidth = function isFullWidth(str) {
    return validator._fullWidth.hasMatch(str);
  };
  validator.isHalfWidth = function isHalfWidth(str) {
    return validator._halfWidth.hasMatch(str);
  };
  validator.isVariableWidth = function isVariableWidth(str) {
    return validator.isFullWidth(str) && validator.isHalfWidth(str);
  };
  validator.isSurrogatePair = function isSurrogatePair(str) {
    return validator._surrogatePairsRegExp.hasMatch(str);
  };
  validator.isMongoId = function isMongoId(str) {
    return validator.isHexadecimal(str) && str.length === 24;
  };
  dart.defineLazy(validator, {
    /*validator._email*/get _email() {
      return core.RegExp.new("^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))$");
    },
    set _email(value) {},
    /*validator._ipv4Maybe*/get _ipv4Maybe() {
      return core.RegExp.new("^(\\d?\\d?\\d)\\.(\\d?\\d?\\d)\\.(\\d?\\d?\\d)\\.(\\d?\\d?\\d)$");
    },
    set _ipv4Maybe(value) {},
    /*validator._ipv6*/get _ipv6() {
      return core.RegExp.new("^::|^::1|^([a-fA-F0-9]{1,4}::?){1,7}([a-fA-F0-9]{1,4})$");
    },
    set _ipv6(value) {},
    /*validator._surrogatePairsRegExp*/get _surrogatePairsRegExp() {
      return core.RegExp.new("[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]");
    },
    set _surrogatePairsRegExp(value) {},
    /*validator._alpha*/get _alpha() {
      return core.RegExp.new("^[a-zA-Z]+$");
    },
    set _alpha(value) {},
    /*validator._alphanumeric*/get _alphanumeric() {
      return core.RegExp.new("^[a-zA-Z0-9]+$");
    },
    set _alphanumeric(value) {},
    /*validator._numeric*/get _numeric() {
      return core.RegExp.new("^-?[0-9]+$");
    },
    set _numeric(value) {},
    /*validator._int*/get _int() {
      return core.RegExp.new("^(?:-?(?:0|[1-9][0-9]*))$");
    },
    set _int(value) {},
    /*validator._float*/get _float() {
      return core.RegExp.new("^(?:-?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$");
    },
    set _float(value) {},
    /*validator._hexadecimal*/get _hexadecimal() {
      return core.RegExp.new("^[0-9a-fA-F]+$");
    },
    set _hexadecimal(value) {},
    /*validator._hexColor*/get _hexColor() {
      return core.RegExp.new("^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$");
    },
    set _hexColor(value) {},
    /*validator._base64*/get _base64() {
      return core.RegExp.new("^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=|[A-Za-z0-9+\\/]{4})$");
    },
    set _base64(value) {},
    /*validator._creditCard*/get _creditCard() {
      return core.RegExp.new("^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$");
    },
    set _creditCard(value) {},
    /*validator._isbn10Maybe*/get _isbn10Maybe() {
      return core.RegExp.new("^(?:[0-9]{9}X|[0-9]{10})$");
    },
    set _isbn10Maybe(value) {},
    /*validator._isbn13Maybe*/get _isbn13Maybe() {
      return core.RegExp.new("^(?:[0-9]{13})$");
    },
    set _isbn13Maybe(value) {},
    /*validator._uuid*/get _uuid() {
      return new (T.IdentityMapOfString$RegExp()).from(["3", core.RegExp.new("^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$"), "4", core.RegExp.new("^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$"), "5", core.RegExp.new("^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$"), "all", core.RegExp.new("^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$")]);
    },
    set _uuid(value) {},
    /*validator._multibyte*/get _multibyte() {
      return core.RegExp.new("[^\\x00-\\x7F]");
    },
    set _multibyte(value) {},
    /*validator._ascii*/get _ascii() {
      return core.RegExp.new("^[\\x00-\\x7F]+$");
    },
    set _ascii(value) {},
    /*validator._fullWidth*/get _fullWidth() {
      return core.RegExp.new("[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]");
    },
    set _fullWidth(value) {},
    /*validator._halfWidth*/get _halfWidth() {
      return core.RegExp.new("[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]");
    },
    set _halfWidth(value) {}
  }, false);
  sanitizer.toString = function toString(input) {
    if (input == null || core.List.is(input) && input[$isEmpty]) {
      input = "";
    }
    return dart.toString(input);
  };
  sanitizer.toDate = function toDate(str) {
    try {
      return core.DateTime.parse(str);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return null;
      } else
        throw e$;
    }
  };
  sanitizer.toFloat = function toFloat(str) {
    try {
      return core.double.parse(str);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return 0 / 0;
      } else
        throw e$;
    }
  };
  sanitizer.toDouble = function toDouble(str) {
    return sanitizer.toFloat(str);
  };
  sanitizer.toInt = function toInt(str, opts) {
    let radix = opts && 'radix' in opts ? opts.radix : 10;
    try {
      return core.int.parse(str, {radix: radix});
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        try {
          return core.double.parse(str)[$toInt]();
        } catch (e$0) {
          let e = dart.getThrown(e$0);
          if (core.Object.is(e)) {
            return 0 / 0;
          } else
            throw e$0;
        }
      } else
        throw e$;
    }
  };
  sanitizer.toBoolean = function toBoolean(str, strict = false) {
    if (strict === true) {
      return str === "1" || str === "true";
    }
    return str !== "0" && str !== "false" && str !== "";
  };
  sanitizer.trim = function trim(str, chars = null) {
    let pattern = chars != null ? core.RegExp.new("^[" + dart.str(chars) + "]+|[" + dart.str(chars) + "]+$") : core.RegExp.new("^\\s+|\\s+$");
    return str[$replaceAll](pattern, "");
  };
  sanitizer.ltrim = function ltrim(str, chars = null) {
    let pattern = chars != null ? core.RegExp.new("^[" + dart.str(chars) + "]+") : core.RegExp.new("^\\s+");
    return str[$replaceAll](pattern, "");
  };
  sanitizer.rtrim = function rtrim(str, chars = null) {
    let pattern = chars != null ? core.RegExp.new("[" + dart.str(chars) + "]+$") : core.RegExp.new("\\s+$");
    return str[$replaceAll](pattern, "");
  };
  sanitizer.whitelist = function whitelist(str, chars) {
    return str[$replaceAll](core.RegExp.new("[^" + chars + "]+"), "");
  };
  sanitizer.blacklist = function blacklist(str, chars) {
    return str[$replaceAll](core.RegExp.new("[" + chars + "]+"), "");
  };
  sanitizer.stripLow = function stripLow(str, keepNewLines = false) {
    let chars = keepNewLines === true ? " -\t\v\f-" : " -";
    return sanitizer.blacklist(str, chars);
  };
  sanitizer.escape = function escape(str) {
    return str[$replaceAll](core.RegExp.new("&"), "&amp;")[$replaceAll](core.RegExp.new("\""), "&quot;")[$replaceAll](core.RegExp.new("'"), "&#x27;")[$replaceAll](core.RegExp.new("<"), "&lt;")[$replaceAll](core.RegExp.new(">"), "&gt;");
  };
  sanitizer.normalizeEmail = function normalizeEmail(email, options = null) {
    options = helpers.merge(options, sanitizer._defaultNormalizeEmailOptions);
    if (validator.isEmail(email) === false) {
      return "";
    }
    let parts = email[$split]("@");
    parts[$_set](1, dart.dsend(parts[$_get](1), 'toLowerCase', []));
    if (dart.equals(options[$_get]("lowercase"), true)) {
      parts[$_set](0, dart.dsend(parts[$_get](0), 'toLowerCase', []));
    }
    if (dart.equals(parts[$_get](1), "gmail.com") || dart.equals(parts[$_get](1), "googlemail.com")) {
      if (dart.equals(options[$_get]("lowercase"), false)) {
        parts[$_set](0, dart.dsend(parts[$_get](0), 'toLowerCase', []));
      }
      parts[$_set](0, dart.dsend(dart.dsend(dart.dsend(parts[$_get](0), 'replaceAll', [".", ""]), 'split', ["+"]), '_get', [0]));
      parts[$_set](1, "gmail.com");
    }
    return parts[$join]("@");
  };
  dart.defineLazy(sanitizer, {
    /*sanitizer._defaultNormalizeEmailOptions*/get _defaultNormalizeEmailOptions() {
      return new (T.IdentityMapOfString$Object()).from(["lowercase", true]);
    },
    set _defaultNormalizeEmailOptions(value) {}
  }, false);
  helpers.shift = function shift(elements) {
    if (elements[$isEmpty]) return null;
    return elements[$removeAt](0);
  };
  helpers.merge = function merge(obj, defaults) {
    if (obj == null) {
      return defaults;
    }
    defaults[$forEach](dart.fn((key, val) => obj[$putIfAbsent](key, dart.fn(() => val, T.VoidToObject())), T.StringAndObjectTovoid()));
    return obj;
  };
  dart.trackLibraries("zapp_user_main", {
    "file:///zapp/project/.zapp_entry.dart": $46zapp_entry,
    "file:///zapp/project/lib/main.dart": main,
    "file:///zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart": web_plugin_registrant,
    "package:flutter_app/screens/register.dart": register,
    "package:flutter_app/components/customTextField.dart": customTextField,
    "package:flutter_app/screens/profile.dart": profile,
    "package:string_validator/string_validator.dart": string_validator,
    "package:string_validator/src/validator.dart": validator,
    "package:string_validator/src/sanitizer.dart": sanitizer,
    "package:string_validator/src/helpers.dart": helpers
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["/zapp/project/.zapp_entry.dart","/zapp/project/lib/main.dart","/zapp/project/.dart_tool/dartpad/web_plugin_registrant.dart","/zapp/project/lib/screens/register.dart","/zapp/project/lib/components/customTextField.dart","/zapp/project/lib/screens/profile.dart","/zapp/pub/.pub_cache/hosted/pub.dev/string_validator-1.0.0/lib/src/validator.dart","/zapp/pub/.pub_cache/hosted/pub.dev/string_validator-1.0.0/lib/src/sanitizer.dart","/zapp/pub/.pub_cache/hosted/pub.dev/string_validator-1.0.0/lib/src/helpers.dart"],"names":[],"mappings":"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","file":"main.js"}');
  // Exports:
  return {
    zapp__project__$46zapp_entry: $46zapp_entry,
    zapp__project__lib__main: main,
    zapp__project__$46dart_tool__dartpad__web_plugin_registrant: web_plugin_registrant,
    screens__register: register,
    components__customTextField: customTextField,
    screens__profile: profile,
    string_validator: string_validator,
    src__validator: validator,
    src__sanitizer: sanitizer,
    src__helpers: helpers
  };
}));

//# sourceMappingURL=main.js.map
